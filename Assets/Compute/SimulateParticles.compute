#pragma kernel InitParticles
#pragma kernel ClearGrid
#pragma kernel BuildHashGrid
#pragma kernel ApplySPHForces
#pragma kernel ApplyDragForce
#pragma kernel UpdateMotion
#pragma kernel UpdateRotation
#pragma kernel CopyPositionsToReadbackBuffer
#pragma kernel CopyRotationsToReadbackBuffer
#pragma kernel CopyInitialOrientationsToReadbackBuffer
#pragma kernel CopyOrientationDeviationsToReadbackBuffer
#pragma kernel ApplyAdhesionConstraints
#pragma kernel ApplyAdhesionDeltas
#pragma kernel CaptureInitialBondOrientations
#pragma kernel CalculateBondOrientationDeviations

#pragma target 5.0

#define THREADS 64
#define GRID_DIM 32
#define GRID_CELL_SIZE 4.0f
#define GRID_TOTAL (GRID_DIM * GRID_DIM * GRID_DIM)
#define TORQUE_SCALE 10000
#define ADHESION_DELTA_SCALE 1000000

// âœ… 80-byte aligned Particle struct
struct Particle {
    float3 position;            // 12
    float  radius;              //  4

    float3 velocity;            // 12
    float  mass;                //  4

    float3 angularVelocity;     // 12
    float  momentOfInertia;     //  4

    float  drag;                //  4
    float  repulsionStrength;   //  4
    float  padding1;            //  4  // Replaced genomeFlags with padding
    float  padding2;            //  4  // Replaced orientConstraintStr with padding

    float4 rotation;            // 16
    int    modeIndex;           //  4  // Keep mode index for color/visualization
}; // Total = 84 bytes

// Adhesion connection struct for compute shader
struct AdhesionConnection {
    int particleA;
    int particleB;
    float restLength;
    float springStiffness;
    float springDamping;
    float4 connectionColor; // RGBA
    
    // Orientation tracking data - separate for each particle
    float3 initialAnglesA;      // Initial bond angles relative to particle A's facing direction (pitch, yaw, roll in degrees)
    float3 initialAnglesB;      // Initial bond angles relative to particle B's facing direction (pitch, yaw, roll in degrees)
    int creationFrame;          // Frame when bond was created
    int orientationCaptured;    // Flag: 0 = not captured, 1 = captured
    float3 currentDeviationA;   // Current angular deviation for particle A (pitch, yaw, roll in degrees)
    float3 currentDeviationB;   // Current angular deviation for particle B (pitch, yaw, roll in degrees)
};

// Simplified data struct without adhesion properties
struct GenomeData {
    uint colorPacked;
};

// Buffer for adhesion connections
RWStructuredBuffer<AdhesionConnection> adhesionConnectionBuffer;
int adhesionConnectionCount;

StructuredBuffer<GenomeData> genomeModesBuffer;
int genomeModesCount;
int defaultGenomeMode;

struct DragInput {
    int selectedID;
    float3 targetPosition;
    float strength;
};

RWStructuredBuffer<Particle> particleBuffer;
RWStructuredBuffer<float3> positionReadbackBuffer;
RWStructuredBuffer<float4> rotationReadbackBuffer;
RWStructuredBuffer<float3> initialOrientationReadbackBuffer;
RWStructuredBuffer<float3> orientationDeviationReadbackBuffer;
RWStructuredBuffer<int3> torqueAccumBuffer;
StructuredBuffer<DragInput> dragInput;

RWStructuredBuffer<uint> gridHeads;
RWStructuredBuffer<uint> gridNext;
RWStructuredBuffer<uint> gridParticleIndices;

RWStructuredBuffer<int3> adhesionVelocityDeltaBuffer;

float deltaTime;
float spawnRadius;
float minRadius;
float maxRadius;
float globalDragMultiplier;
float torqueFactor;
float torqueDamping;
float boundaryFriction;
float rollingContactRadiusMultiplier;
float density;
float repulsionStrength;
int activeParticleCount;
int currentFrame;

uint3 GetGridCoord(float3 pos) {
    float3 gridPos = (pos + spawnRadius) / GRID_CELL_SIZE;
    return clamp((uint3)gridPos, 0, GRID_DIM - 1);
}

uint GridHash(uint3 coord) {
    return coord.x + coord.y * GRID_DIM + coord.z * GRID_DIM * GRID_DIM;
}

[numthreads(THREADS, 1, 1)]
void ClearGrid(uint id : SV_DispatchThreadID)
{
    if (id >= GRID_TOTAL) return;
    gridHeads[id] = 0xffffffff;
}

[numthreads(THREADS, 1, 1)]
void InitParticles(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)particleBuffer.Length || id >= (uint)activeParticleCount) return;

    uint seed = id * 65537 + 17;
    
    Particle p;
    
    // Special case for particle 0 (the first one) - place it at the center
    if (id == 0) {
        p.position = float3(0, 0, 0); // Center position
    } 
    else {
        // For all other particles, use the existing random distribution logic
        // Generate random direction
        float3 dir = normalize(float3(
            frac(sin(seed * 12.9898) * 43758.5453) * 2 - 1,
            frac(sin(seed * 78.233) * 43758.5453) * 2 - 1,
            frac(sin(seed * 91.934) * 43758.5453) * 2 - 1
        ));
        
        // Improved radial distribution: apply cube root to get uniform volume distribution
        float randVal = frac(sin(seed * 1.2345) * 10000.0f);
        float dist = pow(randVal, 1.0f/3.0f) * spawnRadius;
        
        p.position = dir * dist;
        
        // Option for stratified sampling to reduce clumping
        if (id > 1) {
            // Add a small repulsion from previous particles
            float repelDist = pow(0.5f * (float)id / particleBuffer.Length, 1.0f/3.0f) * spawnRadius * 0.1f;
            p.position += normalize(float3(
                frac(sin(seed * 45.678) * 43758.5453) * 2 - 1,
                frac(sin(seed * 67.890) * 43758.5453) * 2 - 1,
                frac(sin(seed * 12.345) * 43758.5453) * 2 - 1
            )) * repelDist;
        }
    }
    
    // Initialize all fields to ensure nothing is left uninitialized
    p.velocity = float3(0, 0, 0);
    p.radius = lerp(minRadius, maxRadius, frac(sin(seed * 3.456) * 999.0f));

    float volume = (4.0f / 3.0f) * 3.1415926f * pow(p.radius, 3);
    p.mass = density * volume;
    p.momentOfInertia = (2.0f / 5.0f) * p.mass * p.radius * p.radius;

    p.drag = lerp(0.5f, 1.0f, frac(sin(seed * 5.6789) * 888.0f));
    p.repulsionStrength = 1.0f;
    p.padding1 = 0.0f; // Initialize padding field (formerly genomeFlags)
    p.padding2 = 0.0f; // Initialize padding field (formerly orientConstraintStr)
    
    // Initialize genome-based properties
    int modeIndex = -1; // Default mode index
    
    // Use the genome modes if available, otherwise use default distribution
    if (genomeModesCount > 0) {
        // Select which genome mode to use for this particle
        // Use defaultGenomeMode for 50% of particles, and random modes for the rest
        if (frac(sin(seed * 78.123) * 5432.1f) < 0.5f) {
            modeIndex = defaultGenomeMode;
        } else {
            modeIndex = (int)(frac(sin(seed * 43.21) * 8765.43f) * genomeModesCount);
        }
        
        // Clamp the index to valid range
        modeIndex = clamp(modeIndex, 0, genomeModesCount - 1);
    }
    
    p.modeIndex = modeIndex;
    p.angularVelocity = float3(0, 0, 0);
    p.rotation = float4(0, 0, 0, 1);

    particleBuffer[id] = p;
    torqueAccumBuffer[id] = int3(0, 0, 0);
}

[numthreads(THREADS, 1, 1)]
void BuildHashGrid(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)particleBuffer.Length || id >= (uint)activeParticleCount) return;
    Particle p = particleBuffer[id];
    uint3 coord = GetGridCoord(p.position);
    uint hash = GridHash(coord);

    gridParticleIndices[id] = id;

    uint previous;
    InterlockedExchange(gridHeads[hash], id, previous);
    gridNext[id] = previous;
}

[numthreads(THREADS, 1, 1)]
void ApplySPHForces(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)particleBuffer.Length || id >= (uint)activeParticleCount) return;

    Particle self = particleBuffer[id];
    float3 posA = self.position;
    float3 velA = self.velocity;
    float3 omegaA = self.angularVelocity;
    float rA = self.radius;

    float3 totalForce = float3(0, 0, 0);
    float3 totalTorque = float3(0, 0, 0);

    float effectiveRadiusA = rA * 0.5f;
    uint3 baseCoord = GetGridCoord(posA);

    for (int dz = -1; dz <= 1; dz++)
    for (int dy = -1; dy <= 1; dy++)
    for (int dx = -1; dx <= 1; dx++)
    {
        int3 icoord = (int3)baseCoord + int3(dx, dy, dz);
        if (any(icoord < 0) || any(icoord >= GRID_DIM)) continue;

        uint hash = GridHash(uint3(icoord));
        uint j = gridHeads[hash];

        while (j != 0xffffffff)
        {
            if (j != id)
            {
                Particle other = particleBuffer[j];
                float3 posB = other.position;
                float3 velB = other.velocity;
                float3 omegaB = other.angularVelocity;
                float rB = other.radius;

                float effectiveRadiusB = rB * 0.5f;
                float3 delta = posA - posB;
                float dist = length(delta);
                float overlap = (effectiveRadiusA + effectiveRadiusB) - dist;

                if (overlap > 0.001f)
                {
                    float3 dir = delta / dist;

                    // --- Repulsion force
                    float overlapFalloff = saturate(overlap / (effectiveRadiusA + effectiveRadiusB));
                    float falloff = saturate(1.0f - dist / (effectiveRadiusA + effectiveRadiusB));
                    float3 repulsion = dir * falloff * repulsionStrength * overlapFalloff;
                    totalForce += repulsion;

                    // --- Rolling contact friction (with tangential slip test)
                    float3 contactPointA = posA - dir * effectiveRadiusA;
                    float3 contactPointB = posB + dir * effectiveRadiusB;

                    float3 surfaceVelA = velA + cross(omegaA, contactPointA - posA);
                    float3 surfaceVelB = velB + cross(omegaB, contactPointB - posB);
                    float3 relSurfaceVel = surfaceVelA - surfaceVelB;

                    float3 tangentVel = relSurfaceVel - dir * dot(relSurfaceVel, dir);
                    float slipSpeed = length(tangentVel);

                    if (slipSpeed > 1e-4)
                    {
                        float3 frictionDir = tangentVel / slipSpeed;

                        float torqueInput = abs(slipSpeed * torqueFactor);
                        float frictionMag = pow(torqueInput, 1.25);
                        frictionMag = min(frictionMag, 10.0f);

                        float torqueRadiusScale = pow(overlapFalloff, 2.0);
                        float effectiveRadiusTorqueA = torqueRadiusScale * effectiveRadiusA * rollingContactRadiusMultiplier;
                        float effectiveRadiusTorqueB = torqueRadiusScale * effectiveRadiusB * rollingContactRadiusMultiplier;

                        float3 rollingTorqueA = cross(-dir * effectiveRadiusTorqueA, -frictionDir * frictionMag);
                        float3 rollingTorqueB = cross( dir * effectiveRadiusTorqueB,  frictionDir * frictionMag);

                        totalTorque += rollingTorqueA;

                        int3 scaled = (int3)(rollingTorqueB * deltaTime * TORQUE_SCALE);
                        InterlockedAdd(torqueAccumBuffer[j].x, scaled.x);
                        InterlockedAdd(torqueAccumBuffer[j].y, scaled.y);
                        InterlockedAdd(torqueAccumBuffer[j].z, scaled.z);
                    }
                }
            }
            j = gridNext[j];
        }
    }

    float3 linearAccel = totalForce / self.mass;
    float3 angularAccel = totalTorque / self.momentOfInertia;

    self.velocity += linearAccel * deltaTime;
    self.angularVelocity += angularAccel * deltaTime;

    particleBuffer[id] = self;
}

[numthreads(1, 1, 1)]
void ApplyDragForce(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)particleBuffer.Length) return;

    DragInput input = dragInput[0];
    if (input.selectedID < 0 || input.selectedID >= (int)particleBuffer.Length) return;

    Particle p = particleBuffer[input.selectedID];
    float3 toTarget = input.targetPosition - p.position;
    float3 force = toTarget * input.strength * deltaTime;
    p.velocity += force / p.mass;
    particleBuffer[input.selectedID] = p;
}

[numthreads(THREADS, 1, 1)]
void UpdateMotion(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)particleBuffer.Length || id >= (uint)activeParticleCount) return;
    Particle p = particleBuffer[id];

    float linearDamping = exp(-p.drag * globalDragMultiplier * deltaTime);
    float angularDamping = exp(-torqueDamping * deltaTime);

    p.velocity *= linearDamping;
    p.angularVelocity *= angularDamping;
    p.position += p.velocity * deltaTime;

    float3 pos = p.position;
    float distFromOrigin = length(pos);
    if (distFromOrigin > spawnRadius)
    {
        float3 norm = normalize(pos);
        p.position = norm * spawnRadius;
        p.velocity = reflect(p.velocity, norm);

        float3 tangentialVel = p.velocity - dot(p.velocity, norm) * norm;
        float3 frictionDir = normalize(tangentialVel + 1e-6);
        float frictionMag = length(tangentialVel) * boundaryFriction;

        float effectiveRadius = p.radius * rollingContactRadiusMultiplier;
        float3 torque = cross(-norm * effectiveRadius, -frictionDir * frictionMag);
        p.angularVelocity += (torque / p.momentOfInertia) * deltaTime;
    }

    particleBuffer[id] = p;
}

float4 quat_mul(float4 q1, float4 q2)
{
    return float4(
        q1.w * q2.xyz + q2.w * q1.xyz + cross(q1.xyz, q2.xyz),
        q1.w * q2.w - dot(q1.xyz, q2.xyz)
    );
}

[numthreads(THREADS, 1, 1)]
void UpdateRotation(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)particleBuffer.Length || id >= (uint)activeParticleCount) return;

    Particle p = particleBuffer[id];
    int3 iTorque = torqueAccumBuffer[id];
    float3 torque = (float3)iTorque / TORQUE_SCALE;

    float3 angularAccel = torque / p.momentOfInertia;
    p.angularVelocity += angularAccel;

    // âœ… Now apply damping here
    p.angularVelocity *= exp(-torqueDamping * deltaTime);

    // Quaternion rotation update
    float3 omega = p.angularVelocity;
    float angle = length(omega * deltaTime);
    if (angle > 0.00001f)
    {
        float3 axis = normalize(omega);
        float s = sin(angle * 0.5f);
        float c = cos(angle * 0.5f);
        float4 dq = float4(axis * s, c);
        p.rotation = normalize(quat_mul(dq, p.rotation));
    }

    torqueAccumBuffer[id] = int3(0, 0, 0);
    particleBuffer[id] = p;
}

[numthreads(THREADS, 1, 1)]
void CopyPositionsToReadbackBuffer(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)particleBuffer.Length || id >= (uint)activeParticleCount) return;
    positionReadbackBuffer[id] = particleBuffer[id].position;
}

[numthreads(THREADS, 1, 1)]
void CopyRotationsToReadbackBuffer(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)particleBuffer.Length || id >= (uint)activeParticleCount) return;
    rotationReadbackBuffer[id] = particleBuffer[id].rotation;
}

[numthreads(THREADS, 1, 1)]
void CopyInitialOrientationsToReadbackBuffer(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)adhesionConnectionCount) return;
    AdhesionConnection conn = adhesionConnectionBuffer[id];
    
    // Copy both particles' initial angles to consecutive slots in the buffer
    // Each bond uses 2 slots: [bondIndex*2] = particleA, [bondIndex*2+1] = particleB
    uint baseIndex = id * 2;
    if (baseIndex + 1 < (uint)initialOrientationReadbackBuffer.Length)
    {
        initialOrientationReadbackBuffer[baseIndex] = conn.initialAnglesA;
        initialOrientationReadbackBuffer[baseIndex + 1] = conn.initialAnglesB;
    }
}

[numthreads(THREADS, 1, 1)]
void CopyOrientationDeviationsToReadbackBuffer(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)adhesionConnectionCount) return;
    AdhesionConnection conn = adhesionConnectionBuffer[id];
    
    // Copy both particles' current deviations to consecutive slots in the buffer
    // Each bond uses 2 slots: [bondIndex*2] = particleA, [bondIndex*2+1] = particleB
    uint baseIndex = id * 2;
    if (baseIndex + 1 < (uint)orientationDeviationReadbackBuffer.Length)
    {
        orientationDeviationReadbackBuffer[baseIndex] = conn.currentDeviationA;
        orientationDeviationReadbackBuffer[baseIndex + 1] = conn.currentDeviationB;
    }
}

[numthreads(1, 1, 1)]
void ApplyAdhesionConstraints(uint id : SV_DispatchThreadID)
{
    if ((int)id >= (int)adhesionConnectionCount) return;
    AdhesionConnection conn = adhesionConnectionBuffer[id];
    int idxA = conn.particleA;
    int idxB = conn.particleB;
    int particleCount = (int)particleBuffer.Length;
    if (idxA < 0 || idxB < 0 || idxA >= particleCount || idxB >= particleCount) return;
    Particle pA = particleBuffer[idxA];
    Particle pB = particleBuffer[idxB];

    // --- Spring (distance) constraint ---
    float3 delta = pB.position - pA.position;
    float dist = length(delta);
    if (dist > 1e-6)
    {
        float3 dir = delta / dist;
        float displacement = dist - conn.restLength;        float springMultiplier = 1.0;
        float3 force = dir * (displacement * conn.springStiffness * springMultiplier);
        float3 relVel = pB.velocity - pA.velocity;
        float dampingForce = dot(relVel, dir) * conn.springDamping;
        force += dir * dampingForce;
        float3 deltaVA = force / pA.mass * deltaTime;
        float3 deltaVB = -force / pB.mass * deltaTime;
        int3 scaledA = (int3)round(deltaVA * ADHESION_DELTA_SCALE);
        int3 scaledB = (int3)round(deltaVB * ADHESION_DELTA_SCALE);
        InterlockedAdd(adhesionVelocityDeltaBuffer[idxA].x, scaledA.x);
        InterlockedAdd(adhesionVelocityDeltaBuffer[idxA].y, scaledA.y);
        InterlockedAdd(adhesionVelocityDeltaBuffer[idxA].z, scaledA.z);
        InterlockedAdd(adhesionVelocityDeltaBuffer[idxB].x, scaledB.x);
        InterlockedAdd(adhesionVelocityDeltaBuffer[idxB].y, scaledB.y);        InterlockedAdd(adhesionVelocityDeltaBuffer[idxB].z, scaledB.z);
    }
}

[numthreads(THREADS, 1, 1)]
void ApplyAdhesionDeltas(uint id : SV_DispatchThreadID)
{
    if (id >= (uint)particleBuffer.Length || id >= (uint)activeParticleCount) return;
    Particle p = particleBuffer[id];
    
    // Get velocity deltas and convert from int to float
    int3 rawVDelta = adhesionVelocityDeltaBuffer[id];
    float3 vDelta = (float3)rawVDelta / ADHESION_DELTA_SCALE;
    
    p.velocity += vDelta;
    
    // Write back and reset deltas
    particleBuffer[id] = p;
    adhesionVelocityDeltaBuffer[id] = int3(0,0,0);
}

// Helper function to convert quaternion to Euler angles (pitch, yaw, roll in degrees)
float3 QuaternionToEuler(float4 q)
{
    float3 angles;
    
    // Roll (x-axis rotation)
    float sinr_cosp = 2 * (q.w * q.x + q.y * q.z);
    float cosr_cosp = 1 - 2 * (q.x * q.x + q.y * q.y);
    angles.z = atan2(sinr_cosp, cosr_cosp);
    
    // Pitch (y-axis rotation)
    float sinp = 2 * (q.w * q.y - q.z * q.x);
    if (abs(sinp) >= 1)
        angles.x = sign(sinp) * 1.5707963267948966; // Use 90 degrees if out of range
    else
        angles.x = asin(sinp);
    
    // Yaw (z-axis rotation)
    float siny_cosp = 2 * (q.w * q.z + q.x * q.y);
    float cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z);
    angles.y = atan2(siny_cosp, cosy_cosp);
    
    // Convert from radians to degrees
    return angles * 57.2957795131; // 180/PI
}

// Helper function to transform a vector by the inverse of a quaternion
float3 RotateVectorByInverseQuaternion(float3 v, float4 q)
{
    // Compute the conjugate of the quaternion (inverse for unit quaternions)
    float4 qConj = float4(-q.x, -q.y, -q.z, q.w);
    
    // Rotate the vector by the conjugate quaternion
    // v' = q* * v * q, where q* is the conjugate
    float3 qvec = qConj.xyz;
    float qw = qConj.w;
    
    // Cross products and dot product for quaternion rotation
    float3 cross1 = cross(qvec, v);
    float3 cross2 = cross(qvec, cross1);
    
    return v + 2.0 * (qw * cross1 + cross2);
}

// Helper function to calculate bond angles relative to each particle's facing direction
float3 CalculateBondAnglesRelativeToParticle(Particle particle, float3 bondDirection)
{
    // Transform bond direction to particle's local coordinate system
    // This gives us the bond direction relative to the particle's current orientation
    float3 localBondDir = RotateVectorByInverseQuaternion(bondDirection, particle.rotation);
    
    // Calculate spherical coordinates (pitch, yaw) relative to particle's forward direction
    // Assuming particle's forward direction is along +Z axis in local space
    
    // Normalize to ensure we're working with a unit vector
    localBondDir = normalize(localBondDir);
    
    // Calculate pitch (angle from XZ plane, rotation around X axis)
    float pitch = asin(localBondDir.y) * 57.2957795131; // Convert to degrees
    
    // Calculate yaw (angle in XZ plane, rotation around Y axis)
    float yaw = atan2(localBondDir.x, localBondDir.z) * 57.2957795131; // Convert to degrees
    
    // For bonds, roll is typically not meaningful, so we set it to 0
    float roll = 0.0;
    
    return float3(pitch, yaw, roll);
}

// Kernel to capture initial bond orientations one frame after creation
[numthreads(1, 1, 1)]
void CaptureInitialBondOrientations(uint id : SV_DispatchThreadID)
{
    if ((int)id >= (int)adhesionConnectionCount) return;
    
    AdhesionConnection conn = adhesionConnectionBuffer[id];
    // Only capture orientation if it hasn't been captured yet and the bond has existed for at least 1 frame
    // No upper bound - orientation should be permanently captured whenever possible
    if (conn.orientationCaptured == 0 && (currentFrame - conn.creationFrame) >= 1)
    {
        int idxA = conn.particleA;
        int idxB = conn.particleB;
        int particleCount = (int)particleBuffer.Length;
        
        if (idxA >= 0 && idxB >= 0 && idxA < particleCount && idxB < particleCount)
        {
            Particle pA = particleBuffer[idxA];
            Particle pB = particleBuffer[idxB];
            
            // Calculate bond direction vectors
            float3 bondDirA_to_B = normalize(pB.position - pA.position); // Direction from A to B
            float3 bondDirB_to_A = normalize(pA.position - pB.position); // Direction from B to A
            
            // Calculate initial bond angles relative to each particle's facing direction
            conn.initialAnglesA = CalculateBondAnglesRelativeToParticle(pA, bondDirA_to_B);
            conn.initialAnglesB = CalculateBondAnglesRelativeToParticle(pB, bondDirB_to_A);
            conn.orientationCaptured = 1;
            
            // Write back to buffer
            adhesionConnectionBuffer[id] = conn;
        }
    }
}

// Kernel to calculate current angular deviations from initial orientations
[numthreads(1, 1, 1)]
void CalculateBondOrientationDeviations(uint id : SV_DispatchThreadID)
{
    if ((int)id >= (int)adhesionConnectionCount) return;
    
    AdhesionConnection conn = adhesionConnectionBuffer[id];
    
    // Only calculate deviations for bonds that have captured initial orientations
    if (conn.orientationCaptured == 1)
    {
        int idxA = conn.particleA;
        int idxB = conn.particleB;
        int particleCount = (int)particleBuffer.Length;
        
        if (idxA >= 0 && idxB >= 0 && idxA < particleCount && idxB < particleCount)
        {
            Particle pA = particleBuffer[idxA];
            Particle pB = particleBuffer[idxB];
            
            // Calculate current bond direction vectors
            float3 currentBondDirA_to_B = normalize(pB.position - pA.position);
            float3 currentBondDirB_to_A = normalize(pA.position - pB.position);
            
            // Calculate current bond angles relative to each particle's facing direction
            float3 currentAnglesA = CalculateBondAnglesRelativeToParticle(pA, currentBondDirA_to_B);
            float3 currentAnglesB = CalculateBondAnglesRelativeToParticle(pB, currentBondDirB_to_A);
            
            // Calculate deviations from initial orientations for both particles
            float3 deviationA = currentAnglesA - conn.initialAnglesA;
            float3 deviationB = currentAnglesB - conn.initialAnglesB;
            
            // Handle angle wrapping (keep angles within -180 to 180 degrees)
            deviationA.x = fmod(deviationA.x + 540.0, 360.0) - 180.0;
            deviationA.y = fmod(deviationA.y + 540.0, 360.0) - 180.0;
            deviationA.z = fmod(deviationA.z + 540.0, 360.0) - 180.0;
            
            deviationB.x = fmod(deviationB.x + 540.0, 360.0) - 180.0;
            deviationB.y = fmod(deviationB.y + 540.0, 360.0) - 180.0;
            deviationB.z = fmod(deviationB.z + 540.0, 360.0) - 180.0;
            
            conn.currentDeviationA = deviationA;
            conn.currentDeviationB = deviationB;
            
            // Write back to buffer
            adhesionConnectionBuffer[id] = conn;
        }
    }
}
